<div class="container py-5">
    <!-- Product Details -->
    <div class="row mb-5">
        <!-- Product Images -->
        <div class="col-md-6">
            <div class="card">
                <img src="<%= product.images[0]?.url || '/images/default-product.jpg' %>" 
                     class="card-img-top main-image" 
                     alt="<%= product.name %>"
                     style="height: 400px; object-fit: contain;">
                
                <!-- Thumbnail Images -->
                <div class="card-body">
                    <div class="d-flex gap-2 overflow-auto">
                        <% product.images.forEach((image, index) => { %>
                            <img src="<%= image.url %>" 
                                 class="thumbnail <%= index === 0 ? 'active' : '' %>"
                                 alt="Thumbnail"
                                 style="width: 60px; height: 60px; object-fit: cover; cursor: pointer;"
                                 onclick="updateMainImage(this.src)">
                        <% }); %>
                    </div>
                </div>
            </div>
        </div>

        <!-- Product Info -->
        <div class="col-md-6">
            <h2 class="mb-3"><%= product.name %></h2>
            <div class="d-flex align-items-center mb-3">
                <div class="me-3">
                    <% for(let i = 1; i <= 5; i++) { %>
                        <i class="bi bi-star<%= i <= product.averageRating ? '-fill' : '' %> text-warning"></i>
                    <% } %>
                    <span class="ms-2">(<%= product.reviews.length %> reviews)</span>
                </div>
                <div class="vr mx-3"></div>
                <span class="text-muted">Brand: <%= product.brand %></span>
            </div>
            <h3 class="mb-4">$<%= product.price.toFixed(2) %></h3>
            <p class="mb-4"><%= product.description %></p>
            
            <div class="d-flex gap-3 mb-4">
                <input type="number" 
                       class="form-control" 
                       id="quantity" 
                       value="1" 
                       min="1" 
                       max="<%= product.stock %>"
                       style="width: 100px;">
                <button class="btn btn-primary flex-grow-1 add-to-cart" 
                        data-product-id="<%= product._id.toString() %>">
                    <i class="bi bi-cart-plus"></i> Add to Cart
                </button>
                <% if (user) { %>
                    <button class="btn btn-outline-danger ms-2" 
                            onclick="toggleWishlist('<%= product._id %>')"
                            id="wishlistBtn">
                        <i class="bi <%= user.wishlist.includes(product._id) ? 'bi-heart-fill' : 'bi-heart' %>"></i>
                    </button>
                <% } %>
            </div>

            <div class="card">
                <div class="card-body">
                    <h6>Product Details:</h6>
                    <ul class="list-unstyled mb-0">
                        <li>Category: <%= product.category.name %></li>
                        <li>Stock: <%= product.stock %> units</li>
                        <li>Brand: <%= product.brand %></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Reviews Section -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Customer Reviews</h5>
                    <% if (locals.user) { %>
                        <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#reviewModal">
                            Write a Review
                        </button>
                    <% } %>
                </div>
                <div class="card-body">
                    <div id="reviewsList">
                        <!-- Reviews will be loaded here -->
                    </div>
                    
                    <!-- Reviews Pagination -->
                    <div class="d-flex justify-content-center mt-4">
                        <nav aria-label="Reviews pagination">
                            <ul class="pagination" id="reviewsPagination"></ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Related Products -->
    <% if (relatedProducts && relatedProducts.length > 0) { %>
        <div class="mb-5">
            <h3 class="mb-4">Related Products</h3>
            <div class="row g-4">
                <% relatedProducts.forEach(relatedProduct => { %>
                    <div class="col-md-3">
                        <div class="card h-100">
                            <a href="/products/<%= relatedProduct._id %>" class="text-decoration-none">
                                <img src="<%= relatedProduct.images[0]?.url || '/images/default-product.jpg' %>" 
                                     class="card-img-top" 
                                     alt="<%= relatedProduct.name %>"
                                     style="height: 200px; object-fit: contain;">
                                <div class="card-body">
                                    <h5 class="card-title text-dark"><%= relatedProduct.name %></h5>
                                    <p class="card-text text-muted mb-2"><%= relatedProduct.brand %></p>
                                    <h6 class="mb-0 text-primary">$<%= relatedProduct.price.toFixed(2) %></h6>
                                </div>
                            </a>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    <% } %>

    <!-- Add this near the product actions -->
    <div class="product-actions">
        <!-- Existing buttons -->
        <button class="btn btn-primary" onclick="addToCart()">Add to Cart</button>
        <button class="btn btn-outline-primary" onclick="addToWishlist()">Add to Wishlist</button>
        <% if (user) { %>
            <button class="btn btn-outline-danger btn-sm" onclick="showReportModal()">
                <i class="bi bi-flag"></i> Report Product
            </button>
        <% } else { %>
            <a href="/users/login" class="btn btn-outline-danger btn-sm">
                <i class="bi bi-flag"></i> Login to Report
            </a>
        <% } %>
    </div>
</div>

<!-- Review Modal -->
<% if (locals.user) { %>
<div class="modal fade" id="reviewModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Write a Review</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="reviewForm">
                    <div class="mb-3">
                        <label class="form-label">Rating</label>
                        <div class="rating">
                            <% for(let i = 1; i <= 5; i++) { %>
                                <input type="radio" name="rating" value="<%= i %>" id="star<%= i %>">
                                <label for="star<%= i %>"><i class="bi bi-star-fill"></i></label>
                            <% } %>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Comment</label>
                        <textarea class="form-control" name="comment" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary" form="reviewForm">Submit Review</button>
            </div>
        </div>
    </div>
</div>
<% } %>

<!-- Report Modal - Only include if user is logged in -->
<% if (user) { %>
<div class="modal fade" id="reportProductModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Report Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form action="/users/report" method="POST">
                <div class="modal-body">
                    <input type="hidden" name="product" value="<%= product._id %>">
                    <input type="hidden" name="type" value="product">
                    <div class="mb-3">
                        <label for="description" class="form-label">What's wrong with this product?</label>
                        <textarea class="form-control" id="description" name="description" rows="3" required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Submit Report</button>
                </div>
            </form>
        </div>
    </div>
</div>
<% } %>

<style>
.thumbnail {
    border: 2px solid transparent;
    border-radius: 4px;
    transition: border-color 0.2s;
}

.thumbnail.active,
.thumbnail:hover {
    border-color: #0d6efd;
}

.rating {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
}

.rating input {
    display: none;
}

.rating label {
    cursor: pointer;
    color: #ddd;
    font-size: 1.5rem;
    padding: 0 0.1em;
    transition: color 0.2s;
}

.rating input:checked ~ label {
    color: #ddd;
}

.rating label:hover,
.rating label:hover ~ label,
.rating input:checked + label,
.rating input:checked + label ~ label {
    color: #ffd700;
}
</style>

<script>
// Add this at the top of your script section
const productId = '<%= product._id %>'; // Get product ID from EJS

// Add the pagination HTML generator function
function generatePaginationHTML(currentPage, totalPages) {
    if (totalPages <= 1) return '';

    let html = '<ul class="pagination">';
    
    // Previous button
    html += `
        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
            <a class="page-link" href="#" data-page="${currentPage - 1}" ${currentPage === 1 ? 'tabindex="-1" aria-disabled="true"' : ''}>
                Previous
            </a>
        </li>
    `;

    // Page numbers
    for (let i = 1; i <= totalPages; i++) {
        html += `
            <li class="page-item ${currentPage === i ? 'active' : ''}">
                <a class="page-link" href="#" data-page="${i}">
                    ${i}
                </a>
            </li>
        `;
    }

    // Next button
    html += `
        <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
            <a class="page-link" href="#" data-page="${currentPage + 1}" ${currentPage === totalPages ? 'tabindex="-1" aria-disabled="true"' : ''}>
                Next
            </a>
        </li>
    `;

    html += '</ul>';
    return html;
}

// Update the loadReviews function
async function loadReviews(page = 1) {
    try {
        const response = await fetch(`/products/${productId}/reviews?page=${page}`);
        const data = await response.json();

        if (data.success) {
            const reviewsList = document.getElementById('reviewsList');
            
            if (data.reviews.length === 0) {
                reviewsList.innerHTML = `
                    <div class="text-center py-4">
                        <p class="text-muted mb-0">No reviews yet. Be the first to review this product!</p>
                    </div>
                `;
                return;
            }

            // Update reviews content
            reviewsList.innerHTML = data.reviews.map(review => `
                <div class="border-bottom mb-3 pb-3">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <div>
                            <h6 class="mb-0">${review.user.name}</h6>
                            <small class="text-muted">${new Date(review.createdAt).toLocaleDateString()}</small>
                        </div>
                        <div>
                            ${Array(5).fill(0).map((_, i) => 
                                `<i class="bi bi-star${i < review.rating ? '-fill' : ''} text-warning"></i>`
                            ).join('')}
                        </div>
                    </div>
                    <p class="mb-0">${review.comment}</p>
                </div>
            `).join('');

            // Update pagination
            const pagination = document.getElementById('reviewsPagination');
            pagination.innerHTML = generatePaginationHTML(data.currentPage, data.totalPages);

            // Add click handlers to pagination buttons
            pagination.querySelectorAll('.page-link').forEach(button => {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    const pageNum = e.target.getAttribute('data-page');
                    if (pageNum) {
                        loadReviews(parseInt(pageNum));
                    }
                });
            });

            // Update average rating if available
            if (data.averageRating) {
                updateAverageRating(data.averageRating);
            }
        } else {
            throw new Error(data.error || 'Failed to load reviews');
        }
    } catch (error) {
        console.error('Error loading reviews:', error);
        document.getElementById('reviewsList').innerHTML = `
            <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle me-2"></i>
                Error loading reviews. Please try again.
            </div>
        `;
    }
}

// Optional: Add function to update average rating display
function updateAverageRating(rating) {
    const ratingDisplay = document.querySelector('.product-rating');
    if (ratingDisplay) {
        const stars = ratingDisplay.querySelectorAll('.bi');
        stars.forEach((star, index) => {
            star.classList.remove('bi-star-fill', 'bi-star');
            star.classList.add(index < rating ? 'bi-star-fill' : 'bi-star');
        });
    }
}

// Load reviews when page loads
document.addEventListener('DOMContentLoaded', () => {
    loadReviews(1);
});

// Image Gallery
function updateMainImage(src) {
    document.querySelector('.main-image').src = src;
    document.querySelectorAll('.thumbnail').forEach(thumb => {
        thumb.classList.remove('active');
        if (thumb.src === src) thumb.classList.add('active');
    });
}

// Reviews Handling
let currentPage = 1;
const reviewsPerPage = 5;

// Helper function to show alerts
function showAlert(message, type = 'success') {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3`;
    alertDiv.style.zIndex = '1050';
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    document.body.appendChild(alertDiv);

    // Remove alert after 3 seconds
    setTimeout(() => {
        alertDiv.remove();
    }, 3000);
}

document.getElementById('reviewForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const submitBtn = this.closest('.modal-content').querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Submitting...';

    try {
        // Validate rating
        const rating = document.querySelector('input[name="rating"]:checked');
        if (!rating) {
            throw new Error('Please select a rating');
        }

        const response = await fetch(`/products/${productId}/reviews`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                rating: rating.value,
                comment: this.comment.value
            })
        });

        const data = await response.json();
        
        if (data.success) {
            // Reset form
            this.reset();
            
            // Close modal properly using Bootstrap
            const reviewModal = document.getElementById('reviewModal');
            const modal = bootstrap.Modal.getInstance(reviewModal);
            modal.hide();

            // Wait for modal hide animation to complete
            setTimeout(() => {
                // Remove modal backdrop
                document.querySelectorAll('.modal-backdrop').forEach(backdrop => backdrop.remove());
                
                // Reset modal state
                reviewModal.classList.remove('show');
                reviewModal.style.display = 'none';
                
                // Reset body state
                document.body.classList.remove('modal-open');
                document.body.style.removeProperty('overflow');
                document.body.style.removeProperty('padding-right');
                
                // Ensure scrolling is enabled
                document.body.style.overflow = 'auto';
                document.documentElement.style.overflow = 'auto';
            }, 300); // Wait for Bootstrap modal hide animation
            
            // Refresh reviews
            await loadReviews(1);
            
            // Show success message
            showAlert('Review submitted successfully!', 'success');
        } else {
            throw new Error(data.error || 'Error submitting review');
        }
    } catch (error) {
        console.error('Error:', error);
        showAlert(error.message || 'Error submitting review', 'danger');
    } finally {
        submitBtn.disabled = false;
        submitBtn.innerHTML = 'Submit Review';
    }
});

// Update the star rating interaction
document.querySelectorAll('.rating input').forEach(input => {
    input.addEventListener('change', function() {
        const rating = parseInt(this.value);
        const labels = this.parentElement.querySelectorAll('label i');
        
        labels.forEach((star, index) => {
            star.style.color = index < rating ? '#ffd700' : '#ddd';
        });
    });
});

// Add hover effect
const ratingContainer = document.querySelector('.rating');
if (ratingContainer) {
    const stars = ratingContainer.querySelectorAll('label i');
    
    ratingContainer.addEventListener('mouseover', function(e) {
        if (e.target.tagName === 'I') {
            const hoverIndex = Array.from(stars).indexOf(e.target);
            stars.forEach((star, index) => {
                star.style.color = index <= hoverIndex ? '#ffd700' : '#ddd';
            });
        }
    });

    ratingContainer.addEventListener('mouseout', function() {
        const checkedInput = ratingContainer.querySelector('input:checked');
        const rating = checkedInput ? parseInt(checkedInput.value) : 0;
        
        stars.forEach((star, index) => {
            star.style.color = index < rating ? '#ffd700' : '#ddd';
        });
    });
}

// Add function to update rating display
function updateRatingDisplay(ratings) {
    const averageRating = ratings.average.toFixed(1);
    const totalReviews = ratings.total;
    
    // Update stars
    const starsContainer = document.querySelector('.rating-stars');
    if (starsContainer) {
        starsContainer.innerHTML = Array(5).fill()
            .map((_, i) => `<i class="bi bi-star${i < Math.round(averageRating) ? '-fill' : ''} text-warning"></i>`)
            .join('');
    }
    
    // Update review count
    const reviewCount = document.querySelector('.review-count');
    if (reviewCount) {
        reviewCount.textContent = `(${totalReviews} reviews)`;
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const addToCartBtn = document.querySelector('.add-to-cart');
    const quantityInput = document.getElementById('quantity');

    addToCartBtn.addEventListener('click', async function() {
        if (!window.user) {
            sessionStorage.setItem('redirectAfterLogin', window.location.href);
            window.location.href = '/users/login';
            return;
        }

        const productId = this.dataset.productId;
        const quantity = parseInt(quantityInput.value) || 1;

        try {
            this.disabled = true;
            
            const response = await fetch('/cart/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    productId,
                    quantity
                })
            });

            const data = await response.json();

            if (data.success) {
                // Update cart count in navbar
                const cartCount = document.querySelector('.cart-count');
                if (cartCount) {
                    cartCount.textContent = data.cart.items.length;
                    cartCount.style.display = 'block';
                }

                // Update cart dropdown content
                const cartItems = document.querySelector('.cart-items');
                if (cartItems && window.updateCartDisplay) {
                    window.updateCartDisplay(data.cart);
                }

                showAlert('Product added to cart!', 'success');
            } else {
                showAlert(data.error || 'Error adding to cart', 'danger');
            }
        } catch (error) {
            console.error('Error:', error);
            showAlert('Error adding to cart', 'danger');
        } finally {
            this.disabled = false;
        }
    });
});

async function toggleWishlist(productId) {
    try {
        const isInWishlist = document.querySelector('#wishlistBtn i').classList.contains('bi-heart-fill');
        const method = isInWishlist ? 'DELETE' : 'POST';
        const url = isInWishlist 
            ? `/users/wishlist/remove/${productId}`
            : `/users/wishlist/add/${productId}`;

        const response = await fetch(url, { method });
        const data = await response.json();

        if (data.success) {
            const icon = document.querySelector('#wishlistBtn i');
            icon.classList.toggle('bi-heart');
            icon.classList.toggle('bi-heart-fill');
        } else {
            throw new Error(data.error);
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error updating wishlist');
    }
}

function showReportModal() {
    const modal = new bootstrap.Modal(document.getElementById('reportProductModal'));
    modal.show();
}
</script> 