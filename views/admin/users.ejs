<!-- Content -->
<div class="container-fluid py-4">
    <!-- Alert container -->
    <div id="alertContainer"></div>
    
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Users Management</h5>
                    
                    <!-- Filter and Sort Controls -->
                    <div class="row mt-3">
                        <div class="col-md-4">
                            <select class="form-select" id="filterRole">
                                <option value="">Filter by Role</option>
                                <option value="user">User</option>
                                <option value="admin">Admin</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <select class="form-select" id="filterStatus">
                                <option value="">Filter by Status</option>
                                <option value="active">Active</option>
                                <option value="banned">Banned</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <select class="form-select" id="sortBy">
                                <option value="">Sort by...</option>
                                <option value="name_asc">Name (A-Z)</option>
                                <option value="name_desc">Name (Z-A)</option>
                                <option value="email_asc">Email (A-Z)</option>
                                <option value="email_desc">Email (Z-A)</option>
                                <option value="date_asc">Registration (Oldest)</option>
                                <option value="date_desc">Registration (Newest)</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Role</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="usersTableBody">
                                <% users.forEach(user => { %>
                                    <tr>
                                        <td><%= user.name %></td>
                                        <td><%= user.email %></td>
                                        <td><%= user.role %></td>
                                        <td>
                                            <span class="badge bg-<%= user.isActive ? 'success' : 'danger' %>">
                                                <%= user.isActive ? 'Active' : 'Banned' %>
                                            </span>
                                        </td>
                                        <td>
                                            <% if (user._id.toString() !== currentUser._id.toString()) { %>
                                                <button onclick="toggleUserStatus('<%= user._id %>', <%= user.isActive %>)"
                                                        class="btn btn-sm btn-<%= user.isActive ? 'warning' : 'success' %>">
                                                    <%= user.isActive ? 'Ban' : 'Unban' %>
                                                </button>
                                                <button onclick="deleteUser('<%= user._id %>')"
                                                        class="btn btn-sm btn-danger">
                                                    Delete
                                                </button>
                                            <% } else { %>
                                                <span class="text-muted">Current User</span>
                                            <% } %>
                                        </td>
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Pagination -->
                    <div class="d-flex justify-content-between align-items-center mt-4">
                        <div>
                            Showing <span id="startIndex">1</span> to 
                            <span id="endIndex">10</span> of 
                            <span id="totalItems"><%= users.length %></span> entries
                        </div>
                        <div class="pagination-container">
                            <button class="btn btn-sm btn-outline-primary me-2" 
                                    onclick="changePage('prev')" 
                                    id="prevBtn">
                                Previous
                            </button>
                            <span id="currentPage">1</span> / <span id="totalPages">1</span>
                            <button class="btn btn-sm btn-outline-primary ms-2" 
                                    onclick="changePage('next')" 
                                    id="nextBtn">
                                Next
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let currentUsers = <%- JSON.stringify(users) %>;
const itemsPerPage = 10;
let currentPage = 1;

// Add event listeners for filters and sort
document.getElementById('filterRole').addEventListener('change', applyFiltersAndSort);
document.getElementById('filterStatus').addEventListener('change', applyFiltersAndSort);
document.getElementById('sortBy').addEventListener('change', applyFiltersAndSort);

function applyFiltersAndSort() {
    console.log('Applying filters and sort...');
    let filteredUsers = [...currentUsers];
    
    // Apply role filter
    const roleFilter = document.getElementById('filterRole').value;
    console.log('Role filter:', roleFilter);
    if (roleFilter) {
        filteredUsers = filteredUsers.filter(user => user.role === roleFilter);
    }
    
    // Apply status filter
    const statusFilter = document.getElementById('filterStatus').value;
    console.log('Status filter:', statusFilter);
    if (statusFilter) {
        filteredUsers = filteredUsers.filter(user => 
            (statusFilter === 'active' && user.isActive) || 
            (statusFilter === 'banned' && !user.isActive)
        );
    }
    
    // Apply sorting
    const sortBy = document.getElementById('sortBy').value;
    console.log('Sort by:', sortBy);
    if (sortBy) {
        const [field, order] = sortBy.split('_');
        
        filteredUsers.sort((a, b) => {
            let comparison;
            
            if (field === 'date') {
                comparison = new Date(a.createdAt) - new Date(b.createdAt);
            } else {
                comparison = String(a[field]).localeCompare(String(b[field]));
            }
            
            return order === 'asc' ? comparison : -comparison;
        });
    }
    
    console.log('Filtered users:', filteredUsers);
    updateTable(filteredUsers);
}

function updateTable(users) {
    const tbody = document.getElementById('usersTableBody');
    
    tbody.innerHTML = users.map(user => `
        <tr>
            <td>${user.name}</td>
            <td>${user.email}</td>
            <td>${user.role}</td>
            <td>
                <span class="badge bg-${user.isActive ? 'success' : 'danger'}">
                    ${user.isActive ? 'Active' : 'Banned'}
                </span>
            </td>
            <td>
                ${user._id !== '<%= currentUser._id %>' ? `
                    <button onclick="toggleUserStatus('${user._id}', ${user.isActive})"
                            class="btn btn-sm btn-${user.isActive ? 'warning' : 'success'}">
                        ${user.isActive ? 'Ban' : 'Unban'}
                    </button>
                    <button onclick="deleteUser('${user._id}')"
                            class="btn btn-sm btn-danger">
                        Delete
                    </button>
                ` : `
                    <span class="text-muted">Current User</span>
                `}
            </td>
        </tr>
    `).join('');
}

// Change page
function changePage(direction) {
    if (direction === 'prev' && currentPage > 1) {
        currentPage--;
    } else if (direction === 'next' && currentPage < Math.ceil(currentUsers.length / itemsPerPage)) {
        currentPage++;
    }
    
    updateTable(currentUsers);
}

async function deleteUser(userId) {
    if (!confirm('Are you sure you want to delete this user?')) {
        return;
    }

    try {
        const response = await fetch(`/admin/users/${userId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();

        if (data.success) {
            showAlert('User deleted successfully', 'success');
            setTimeout(() => location.reload(), 1500);
        } else {
            showAlert(data.error || 'Error deleting user', 'danger');
        }
    } catch (error) {
        console.error('Error:', error);
        showAlert('Error deleting user', 'danger');
    }
}

async function toggleUserStatus(userId, currentStatus) {
    try {
        const response = await fetch(`/admin/users/${userId}/toggle-status`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();

        if (data.success) {
            showAlert(`User ${currentStatus ? 'banned' : 'unbanned'} successfully`, 'success');
            setTimeout(() => location.reload(), 1500);
        } else {
            showAlert(data.error || 'Error updating user status', 'danger');
        }
    } catch (error) {
        console.error('Error:', error);
        showAlert('Error updating user status', 'danger');
    }
}

function showAlert(message, type = 'success') {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    // Find the alert container and insert the alert
    const alertContainer = document.getElementById('alertContainer');
    alertContainer.appendChild(alertDiv);
    
    setTimeout(() => alertDiv.remove(), 3000);
}
</script> 