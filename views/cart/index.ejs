<div class="container py-5">
    <h2 class="mb-4">Shopping Cart</h2>

    <% if (cart && cart.length > 0) { %>
        <div class="row">
            <!-- Cart Items -->
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-body">
                        <% cart.forEach(item => { %>
                            <div class="cart-item d-flex align-items-center mb-3 pb-3 border-bottom" 
                                 data-item-id="<%= item._id %>"
                                 data-price="<%= item.product.price %>"
                                 data-stock="<%= item.product.stock %>">
                                <img src="<%= item.product.images?.[0]?.url || '/images/default.jpg' %>"
                                     alt="<%= item.product.name %>"
                                     class="me-3"
                                     style="width: 80px; height: 80px; object-fit: contain;">
                                
                                <div class="flex-grow-1">
                                    <h5 class="mb-1"><%= item.product.name %></h5>
                                    <p class="text-muted mb-0">$<%= item.product.price.toFixed(2) %></p>
                                    <small class="text-muted">Available: <%= item.product.stock %></small>
                                </div>

                                <div class="d-flex align-items-center">
                                    <div class="quantity-control me-3">
                                        <button class="btn btn-sm btn-outline-secondary quantity-btn" 
                                                data-action="decrease"
                                                data-item-id="<%= item._id %>">
                                            <i class="bi bi-dash"></i>
                                        </button>
                                        <input type="number" 
                                               class="form-control form-control-sm quantity-input" 
                                               value="<%= item.quantity %>"
                                               min="1"
                                               max="<%= item.product.stock %>"
                                               style="width: 60px; text-align: center;"
                                               data-item-id="<%= item._id %>"
                                               data-price="<%= item.product.price %>"
                                               data-stock="<%= item.product.stock %>">
                                        <button class="btn btn-sm btn-outline-secondary quantity-btn"
                                                data-action="increase"
                                                data-item-id="<%= item._id %>">
                                            <i class="bi bi-plus"></i>
                                        </button>
                                    </div>
                                    <button type="button" 
                                            class="btn btn-sm btn-outline-danger"
                                            onclick="removeFromCart('<%= item._id %>')">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>

                                <div class="text-end">
                                    <div class="item-total">$<%= (item.product.price * item.quantity).toFixed(2) %></div>
                                    <small class="text-muted">
                                        $<%= item.product.price.toFixed(2) %> each
                                    </small>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>
            </div>

            <!-- Cart Summary -->
            <div class="col-lg-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title mb-4">Order Summary</h5>
                        <div class="d-flex justify-content-between mb-3">
                            <span>Subtotal</span>
                            <strong class="cart-total-amount">$<%= total.toFixed(2) %></strong>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between mb-4">
                            <span>Total</span>
                            <strong class="text-primary cart-total-amount">$<%= total.toFixed(2) %></strong>
                        </div>
                        <div class="d-grid">
                            <button onclick="validateAndCheckout()" class="btn btn-primary">Proceed to Checkout</button>
                            <a href="/products" class="btn btn-outline-secondary mt-2">Continue Shopping</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    <% } else { %>
        <div class="text-center py-5">
            <i class="bi bi-cart3 display-1 text-muted mb-4"></i>
            <h3>Your cart is empty</h3>
            <p class="text-muted">Looks like you haven't added anything to your cart yet.</p>
            <a href="/products" class="btn btn-primary mt-3">Start Shopping</a>
        </div>
    <% } %>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Handle quantity buttons
    document.querySelectorAll('.quantity-btn').forEach(button => {
        button.addEventListener('click', function() {
            const itemId = this.dataset.itemId;
            const input = document.querySelector(`.quantity-input[data-item-id="${itemId}"]`);
            const currentValue = parseInt(input.value);
            const maxStock = parseInt(input.dataset.stock);
            
            let newValue = currentValue;
            if (this.dataset.action === 'increase' && currentValue < maxStock) {
                newValue = currentValue + 1;
            } else if (this.dataset.action === 'decrease' && currentValue > 1) {
                newValue = currentValue - 1;
            }
            
            if (newValue !== currentValue) {
                input.value = newValue;
                updateCartQuantity(itemId, newValue);
            }
        });
    });

    // Handle direct input changes
    document.querySelectorAll('.quantity-input').forEach(input => {
        input.addEventListener('change', function() {
            const itemId = this.dataset.itemId;
            let value = parseInt(this.value);
            const maxStock = parseInt(this.dataset.stock);
            
            // Validate input
            if (isNaN(value) || value < 1) {
                value = 1;
            } else if (value > maxStock) {
                value = maxStock;
            }
            
            this.value = value;
            updateCartQuantity(itemId, value);
        });
    });
});

async function updateCartQuantity(itemId, quantity) {
    try {
        const response = await fetch('/cart/update', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ itemId, quantity })
        });

        const data = await response.json();

        if (response.ok) {
            // Update item total
            const input = document.querySelector(`.quantity-input[data-item-id="${itemId}"]`);
            const price = parseFloat(input.dataset.price);
            const itemTotal = price * quantity;
            
            const cartItem = input.closest('.cart-item');
            cartItem.querySelector('.item-total').textContent = `$${itemTotal.toFixed(2)}`;

            // Update cart total
            if (data.cart.total !== undefined) {
                updateCartTotal(data.cart.total);
            }

            // Update cart count in navbar
            if (data.cart.count !== undefined) {
                updateCartCount(data.cart.count);
            }
        } else {
            showAlert(data.error || 'Error updating quantity', 'danger');
            // Reset input to previous value if there's an error
            location.reload();
        }
    } catch (error) {
        console.error('Error:', error);
        showAlert('Error updating quantity', 'danger');
        location.reload();
    }
}

// Add helper functions
function updateCartTotal(total) {
    const totalElements = document.querySelectorAll('.cart-total-amount');
    totalElements.forEach(el => {
        el.textContent = `$${total.toFixed(2)}`;
    });
}

function updateCartCount(count) {
    const cartCount = document.querySelector('.cart-count');
    if (cartCount) {
        cartCount.textContent = count;
        cartCount.style.display = count > 0 ? 'block' : 'none';
    }
}

async function removeFromCart(productId) {
    try {
        const response = await fetch(`/cart/remove/${productId}`, {
            method: 'DELETE',
            headers: {
                'Accept': 'application/json'
            }
        });

        if (response.ok) {
            location.reload();
        } else {
            const data = await response.json();
            alert(data.error || 'Error removing item');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error removing item');
    }
}

async function validateAndCheckout() {
    try {
        // First validate the cart
        const response = await fetch('/cart/validate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json'
            }
        });

        // Check if response is JSON
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            throw new Error('Server returned non-JSON response');
        }

        const data = await response.json();

        if (!response.ok) {
            if (data.stockErrors) {
                const errorMessages = data.stockErrors
                    .map(error => error.message)
                    .join('\n');
                throw new Error(errorMessages);
            }
            throw new Error(data.error || 'Error validating cart');
        }

        // If validation passes, redirect to checkout page
        window.location.href = '/cart/checkout';

    } catch (error) {
        console.error('Validation error:', error);
        showAlert(error.message || 'Error proceeding to checkout', 'danger');
    }
}

// Helper function to show alerts (if not already defined)
function showAlert(message, type = 'success') {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3`;
    alertDiv.style.zIndex = '1050';
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    document.body.appendChild(alertDiv);

    setTimeout(() => {
        alertDiv.remove();
    }, 3000);
}
</script>

<style>
.quantity-control {
    display: flex;
    align-items: center;
    gap: 5px;
}

.quantity-input {
    padding: 0.25rem;
    border-radius: 4px;
    border: 1px solid #ced4da;
}

.quantity-input::-webkit-inner-spin-button,
.quantity-input::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.quantity-input {
    -moz-appearance: textfield;
}

.cart-item {
    transition: background-color 0.2s;
}

.cart-item:hover {
    background-color: rgba(0,0,0,0.02);
}
</style> 